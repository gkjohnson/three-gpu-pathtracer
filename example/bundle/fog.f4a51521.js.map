{"mappings":"ISiBI,EAAY,EACZ,EAAQ,EAAO,EAAa,EAC5B,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,oB,I,G,I,E,E,QRjBG,OAAM,UAA0B,EAAA,oBAAmB,CAEzD,YAAa,CAAM,CAAG,CAErB,KAAK,CAAE,GAEP,IAAI,CAAC,mBAAmB,CAAG,CAAA,EAE3B,IAAI,CAAC,OAAO,CAAG,KACf,IAAI,CAAC,QAAQ,CAAG,IAAI,EAAA,KAAI,CACxB,IAAI,CAAC,iBAAiB,CAAG,EACzB,IAAI,CAAC,OAAO,CAAG,IACf,IAAI,CAAC,WAAW,CAAG,CAAA,EACnB,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,SAAS,CAAG,EAEjB,IAAI,CAAC,SAAS,CAAE,EAEjB,CAED,C,G,E,Q,S,C,C,C,E,E,E,O,C,oB,I,G,I,E,E,QCpBO,OAAM,UAA0B,EAAA,SAAQ,CAE9C,YAAa,GAAG,CAAI,CAAG,CAEtB,KAAK,IAAK,GAEV,IAAI,CAAC,MAAM,CAAG,KACd,IAAI,CAAC,MAAM,CAAG,CAEf,CAEA,KAAM,CAAM,CAAE,CAAS,CAAG,CAOzB,OALA,KAAK,CAAC,KAAM,EAAQ,GAEpB,IAAI,CAAC,MAAM,CAAG,EAAO,MAAM,CAC3B,IAAI,CAAC,MAAM,CAAG,EAAO,MAAM,CAEpB,IAAI,AAEZ,CAED,C,G,E,Q,S,C,C,C,E,E,E,O,C,oB,I,GCxBO,SAAS,IAEf,IAAI,EAAQ,EACR,EAAc,KAAK,GAAG,CAAE,EAAI,OAAO,gBAAgB,CAAE,IAWzD,OARoB,OAAO,UAAU,CAAG,OAAO,WAAW,CACvC,MAElB,EAAQ,EACR,EAAc,GAAM,OAAO,gBAAgB,EAI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","sources":["<anon>","src/materials/surface/FogVolumeMaterial.js","src/objects/PhysicalSpotLight.js","example/utils/getScaledSettings.js","example/utils/LoaderElement.js","src/materials/MaterialBase.js","src/shader/common/math_functions.glsl.js","src/shader/common/util_functions.glsl.js","src/shader/bsdf/ggx_functions.glsl.js","example/fog.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b70\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b70\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"11ZPe\", function(module, exports) {\n\n$parcel$export(module.exports, \"FogVolumeMaterial\", () => $0c05d7af92b89513$export$cb2b7ad109612144);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $0c05d7af92b89513$export$cb2b7ad109612144 extends (0, $ilwiq.MeshStandardMaterial) {\n    constructor(params){\n        super(params);\n        this.isFogVolumeMaterial = true;\n        this.density = 0.015;\n        this.emissive = new (0, $ilwiq.Color)();\n        this.emissiveIntensity = 0.0;\n        this.opacity = 0.15;\n        this.transparent = true;\n        this.roughness = 1.0;\n        this.metalness = 0.0;\n        this.setValues(params);\n    }\n}\n\n});\n\nparcelRegister(\"d4kES\", function(module, exports) {\n\n$parcel$export(module.exports, \"PhysicalSpotLight\", () => $983bac6297e5cd71$export$920191b129a29c0);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $983bac6297e5cd71$export$920191b129a29c0 extends (0, $ilwiq.SpotLight) {\n    constructor(...args){\n        super(...args);\n        this.iesMap = null;\n        this.radius = 0;\n    }\n    copy(source, recursive) {\n        super.copy(source, recursive);\n        this.iesMap = source.iesMap;\n        this.radius = source.radius;\n        return this;\n    }\n}\n\n});\n\nparcelRegister(\"cE5k3\", function(module, exports) {\n\n$parcel$export(module.exports, \"getScaledSettings\", () => $934d596524c3e5a8$export$5bc756cb1c628b75);\nfunction $934d596524c3e5a8$export$5bc756cb1c628b75() {\n    let tiles = 3;\n    let renderScale = Math.max(1 / window.devicePixelRatio, 0.5);\n    // adjust performance parameters for mobile\n    const aspectRatio = window.innerWidth / window.innerHeight;\n    if (aspectRatio < 0.65) {\n        tiles = 4;\n        renderScale = 0.5 / window.devicePixelRatio;\n    }\n    return {\n        tiles: tiles,\n        renderScale: renderScale\n    };\n}\n\n});\n\nparcelRegister(\"e2Pv4\", function(module, exports) {\n\n$parcel$export(module.exports, \"LoaderElement\", () => $a399336cf50451da$export$c2252eb3bc5ad0b7);\nlet $a399336cf50451da$var$_styleElement;\nfunction $a399336cf50451da$var$initializeStyles() {\n    if ($a399336cf50451da$var$_styleElement) return;\n    $a399336cf50451da$var$_styleElement = document.createElement(\"style\");\n    $a399336cf50451da$var$_styleElement.textContent = /* css */ `\n\n\t\t.loader-container, .description {\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\tcolor: white;\n\t\t\tfont-weight: light;\n\t\t\talign-items: flex-start;\n\t\t\tfont-size: 14px;\n\t\t\tpointer-events: none;\n\t\t\tuser-select: none;\n\t\t}\n\n\t\t.loader-container {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tbottom: 0;\n\t\t}\n\n\t\t.description {\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\ttext-align: center;\n\t\t\tpadding: 5px 0;\n\t\t}\n\n\t\t.loader-container .bar {\n\t\t\theight: 2px;\n\t\t\tbackground: white;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.loader-container .credits,\n\t\t.loader-container .samples,\n\t\t.loader-container .percentage {\n\t\t\tpadding: 5px;\n\t\t\tmargin: 0 0 1px 1px;\n\t\t\tbackground: rgba( 0, 0, 0, 0.2 );\n\t\t\tborder-radius: 2px;\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t.loader-container:not(.loading) .bar,\n\t\t.loader-container:not(.loading) .percentage,\n\t\t.loader-container.loading .credits,\n\t\t.loader-container.loading .samples,\n\t\t.loader-container .credits:empty {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.loader-container .credits a,\n\t\t.loader-container .credits,\n\t\t.loader-container .samples {\n\t\t\tcolor: rgba( 255, 255, 255, 0.75 );\n\t\t}\n\t`;\n    document.head.appendChild($a399336cf50451da$var$_styleElement);\n}\nclass $a399336cf50451da$export$c2252eb3bc5ad0b7 {\n    constructor(){\n        $a399336cf50451da$var$initializeStyles();\n        const container = document.createElement(\"div\");\n        container.classList.add(\"loader-container\");\n        const percentageEl = document.createElement(\"div\");\n        percentageEl.classList.add(\"percentage\");\n        container.appendChild(percentageEl);\n        const samplesEl = document.createElement(\"div\");\n        samplesEl.classList.add(\"samples\");\n        container.appendChild(samplesEl);\n        const creditsEl = document.createElement(\"div\");\n        creditsEl.classList.add(\"credits\");\n        container.appendChild(creditsEl);\n        const loaderBarEl = document.createElement(\"div\");\n        loaderBarEl.classList.add(\"bar\");\n        container.appendChild(loaderBarEl);\n        const descriptionEl = document.createElement(\"div\");\n        descriptionEl.classList.add(\"description\");\n        container.appendChild(descriptionEl);\n        this._description = descriptionEl;\n        this._loaderBar = loaderBarEl;\n        this._percentage = percentageEl;\n        this._credits = creditsEl;\n        this._samples = samplesEl;\n        this._container = container;\n        this.setPercentage(0);\n    }\n    attach(container) {\n        container.appendChild(this._container);\n        container.appendChild(this._description);\n    }\n    setPercentage(perc) {\n        this._loaderBar.style.width = `${perc * 100}%`;\n        if (perc === 0) this._percentage.innerText = \"Loading...\";\n        else this._percentage.innerText = `${(perc * 100).toFixed(0)}%`;\n        if (perc >= 1) this._container.classList.remove(\"loading\");\n        else this._container.classList.add(\"loading\");\n    }\n    setSamples(count, compiling = false) {\n        if (compiling) this._samples.innerText = \"compiling shader...\";\n        else this._samples.innerText = `${Math.floor(count)} samples`;\n    }\n    setCredits(credits) {\n        this._credits.innerHTML = credits;\n    }\n    setDescription(description) {\n        this._description.innerHTML = description;\n    }\n}\n\n});\n\nparcelRegister(\"9fZ6X\", function(module, exports) {\n\n$parcel$export(module.exports, \"MaterialBase\", () => $6bd4eb2914ee2835$export$f1ac3a587b6cbb5d);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $6bd4eb2914ee2835$export$f1ac3a587b6cbb5d extends (0, $ilwiq.ShaderMaterial) {\n    set needsUpdate(v) {\n        super.needsUpdate = true;\n        this.dispatchEvent({\n            type: \"recompilation\"\n        });\n    }\n    constructor(shader){\n        super(shader);\n        for(const key in this.uniforms)Object.defineProperty(this, key, {\n            get () {\n                return this.uniforms[key].value;\n            },\n            set (v) {\n                this.uniforms[key].value = v;\n            }\n        });\n    }\n    // sets the given named define value and sets \"needsUpdate\" to true if it's different\n    setDefine(name, value) {\n        if (value === undefined || value === null) {\n            if (name in this.defines) {\n                delete this.defines[name];\n                this.needsUpdate = true;\n                return true;\n            }\n        } else if (this.defines[name] !== value) {\n            this.defines[name] = value;\n            this.needsUpdate = true;\n            return true;\n        }\n        return false;\n    }\n}\n\n});\n\nparcelRegister(\"fYvb1\", function(module, exports) {\n\n$parcel$export(module.exports, \"math_functions\", () => $ba14a4aaa0cde19b$export$98323a006d35be35);\nconst $ba14a4aaa0cde19b$export$98323a006d35be35 = /* glsl */ `\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n\n});\n\nparcelRegister(\"dUUQZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"util_functions\", () => $a21c9b4177584031$export$fe1d788deccfbee3);\nconst $a21c9b4177584031$export$fe1d788deccfbee3 = /* glsl */ `\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n\n});\n\nparcelRegister(\"8keuf\", function(module, exports) {\n\n$parcel$export(module.exports, \"ggx_functions\", () => $60fb6dc3c6495c33$export$4c711108e2e8ef5e);\nconst $60fb6dc3c6495c33$export$4c711108e2e8ef5e = /* glsl */ `\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n\n});\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $11ZPe = parcelRequire(\"11ZPe\");\nvar $kLfIo = parcelRequire(\"kLfIo\");\nvar $d4kES = parcelRequire(\"d4kES\");\nvar $8mHfG = parcelRequire(\"8mHfG\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $cE5k3 = parcelRequire(\"cE5k3\");\n\nvar $e2Pv4 = parcelRequire(\"e2Pv4\");\nlet $afdbfb1b28c84b51$var$pathTracer, $afdbfb1b28c84b51$var$renderer, $afdbfb1b28c84b51$var$controls;\nlet $afdbfb1b28c84b51$var$camera, $afdbfb1b28c84b51$var$scene, $afdbfb1b28c84b51$var$fogMaterial, $afdbfb1b28c84b51$var$spotLight;\nlet $afdbfb1b28c84b51$var$loader;\nconst $afdbfb1b28c84b51$var$params = {\n    multipleImportanceSampling: true,\n    tiles: 2,\n    renderScale: 1 / window.devicePixelRatio,\n    color: \"#eeeeee\",\n    fog: true,\n    density: 0.01,\n    lightIntensity: 500,\n    lightColor: \"#ffffff\",\n    bounces: 10,\n    ...(0, $cE5k3.getScaledSettings)()\n};\n$afdbfb1b28c84b51$var$init();\nasync function $afdbfb1b28c84b51$var$init() {\n    $afdbfb1b28c84b51$var$loader = new (0, $e2Pv4.LoaderElement)();\n    $afdbfb1b28c84b51$var$loader.attach(document.body);\n    // renderer\n    $afdbfb1b28c84b51$var$renderer = new (0, $ilwiq.WebGLRenderer)({\n        antialias: true\n    });\n    $afdbfb1b28c84b51$var$renderer.toneMapping = (0, $ilwiq.ACESFilmicToneMapping);\n    document.body.appendChild($afdbfb1b28c84b51$var$renderer.domElement);\n    // path tracer\n    $afdbfb1b28c84b51$var$pathTracer = new (0, $8mHfG.WebGLPathTracer)($afdbfb1b28c84b51$var$renderer);\n    $afdbfb1b28c84b51$var$pathTracer.tiles.set($afdbfb1b28c84b51$var$params.tiles, $afdbfb1b28c84b51$var$params.tiles);\n    // camera\n    const aspect = window.innerWidth / window.innerHeight;\n    $afdbfb1b28c84b51$var$camera = new (0, $kLfIo.PhysicalCamera)(75, aspect, 0.025, 500);\n    $afdbfb1b28c84b51$var$camera.position.set(0, 1, 6);\n    // controls\n    $afdbfb1b28c84b51$var$controls = new (0, $5Rd1x.OrbitControls)($afdbfb1b28c84b51$var$camera, $afdbfb1b28c84b51$var$renderer.domElement);\n    $afdbfb1b28c84b51$var$controls.addEventListener(\"change\", ()=>{\n        $afdbfb1b28c84b51$var$pathTracer.updateCamera();\n    });\n    // scene\n    $afdbfb1b28c84b51$var$scene = new (0, $ilwiq.Scene)();\n    $afdbfb1b28c84b51$var$scene.background = new (0, $ilwiq.Color)(0);\n    $afdbfb1b28c84b51$var$fogMaterial = new (0, $11ZPe.FogVolumeMaterial)();\n    const material = new (0, $ilwiq.MeshStandardMaterial)({\n        color: 0x999999,\n        roughness: 1,\n        metalness: 0\n    });\n    const fogMesh = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(8, 4.05, 8), $afdbfb1b28c84b51$var$fogMaterial);\n    const floor = new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(5, 5, 0.1, 40), material);\n    floor.position.y = -1.1;\n    // prepare light\n    $afdbfb1b28c84b51$var$spotLight = new (0, $d4kES.PhysicalSpotLight)();\n    $afdbfb1b28c84b51$var$spotLight.position.set(0, 1, 0).multiplyScalar(3);\n    $afdbfb1b28c84b51$var$spotLight.angle = Math.PI / 4.5;\n    $afdbfb1b28c84b51$var$spotLight.decay = 2;\n    $afdbfb1b28c84b51$var$spotLight.penumbra = 0.15;\n    $afdbfb1b28c84b51$var$spotLight.distance = 0.0;\n    $afdbfb1b28c84b51$var$spotLight.intensity = 50.0;\n    $afdbfb1b28c84b51$var$spotLight.radius = 0.05;\n    // prepare slats\n    const group = new (0, $ilwiq.Group)();\n    group.add($afdbfb1b28c84b51$var$spotLight);\n    const TOTAL_SLATS = 10;\n    const WIDTH = 2.0;\n    const slat = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.1, 0.1, 2), material);\n    for(let i = 0; i < TOTAL_SLATS; i++){\n        const s = slat.clone();\n        s.position.x = -WIDTH * 0.5 + WIDTH * i / (TOTAL_SLATS - 1);\n        s.position.y = 2;\n        group.add(s);\n    }\n    $afdbfb1b28c84b51$var$scene.add(fogMesh, floor, group);\n    $afdbfb1b28c84b51$var$pathTracer.setScene($afdbfb1b28c84b51$var$scene, $afdbfb1b28c84b51$var$camera);\n    $afdbfb1b28c84b51$var$loader.setPercentage(1);\n    $afdbfb1b28c84b51$var$onParamsChange();\n    $afdbfb1b28c84b51$var$onResize();\n    window.addEventListener(\"resize\", $afdbfb1b28c84b51$var$onResize);\n    // gui\n    const gui = new (0, $jiuw3.GUI)();\n    const ptFolder = gui.addFolder(\"Path Tracer\");\n    ptFolder.add($afdbfb1b28c84b51$var$params, \"bounces\", 1, 20, 1).onChange($afdbfb1b28c84b51$var$onParamsChange);\n    ptFolder.add($afdbfb1b28c84b51$var$params, \"multipleImportanceSampling\").onChange($afdbfb1b28c84b51$var$onParamsChange);\n    ptFolder.add($afdbfb1b28c84b51$var$params, \"tiles\", 1, 4, 1).onChange((value)=>{\n        $afdbfb1b28c84b51$var$pathTracer.tiles.set(value, value);\n    });\n    ptFolder.add($afdbfb1b28c84b51$var$params, \"renderScale\", 0.1, 1).onChange($afdbfb1b28c84b51$var$onParamsChange);\n    const fogFolder = gui.addFolder(\"Fog\");\n    fogFolder.addColor($afdbfb1b28c84b51$var$params, \"color\").onChange($afdbfb1b28c84b51$var$onParamsChange);\n    fogFolder.add($afdbfb1b28c84b51$var$params, \"density\", 0, 1).onChange($afdbfb1b28c84b51$var$onParamsChange);\n    const lightFolder = gui.addFolder(\"Spot Light\");\n    lightFolder.add($afdbfb1b28c84b51$var$params, \"lightIntensity\", 0, 1000).onChange($afdbfb1b28c84b51$var$onParamsChange);\n    lightFolder.addColor($afdbfb1b28c84b51$var$params, \"lightColor\").onChange($afdbfb1b28c84b51$var$onParamsChange);\n    $afdbfb1b28c84b51$var$animate();\n}\nfunction $afdbfb1b28c84b51$var$onParamsChange() {\n    $afdbfb1b28c84b51$var$fogMaterial.color.set($afdbfb1b28c84b51$var$params.color).convertSRGBToLinear();\n    $afdbfb1b28c84b51$var$fogMaterial.density = $afdbfb1b28c84b51$var$params.density;\n    $afdbfb1b28c84b51$var$spotLight.intensity = $afdbfb1b28c84b51$var$params.lightIntensity;\n    $afdbfb1b28c84b51$var$spotLight.color.set($afdbfb1b28c84b51$var$params.lightColor);\n    $afdbfb1b28c84b51$var$pathTracer.multipleImportanceSampling = $afdbfb1b28c84b51$var$params.multipleImportanceSampling;\n    $afdbfb1b28c84b51$var$pathTracer.bounces = $afdbfb1b28c84b51$var$params.bounces;\n    $afdbfb1b28c84b51$var$pathTracer.renderScale = $afdbfb1b28c84b51$var$params.renderScale;\n    $afdbfb1b28c84b51$var$pathTracer.updateLights();\n    $afdbfb1b28c84b51$var$pathTracer.updateMaterials();\n}\nfunction $afdbfb1b28c84b51$var$onResize() {\n    $afdbfb1b28c84b51$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $afdbfb1b28c84b51$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $afdbfb1b28c84b51$var$camera.aspect = window.innerWidth / window.innerHeight;\n    $afdbfb1b28c84b51$var$camera.updateProjectionMatrix();\n    $afdbfb1b28c84b51$var$pathTracer.updateCamera();\n}\nfunction $afdbfb1b28c84b51$var$animate() {\n    requestAnimationFrame($afdbfb1b28c84b51$var$animate);\n    $afdbfb1b28c84b51$var$pathTracer.renderSample();\n    $afdbfb1b28c84b51$var$loader.setSamples($afdbfb1b28c84b51$var$pathTracer.samples, $afdbfb1b28c84b51$var$pathTracer.isCompiling);\n}\n\n\n//# sourceMappingURL=fog.f4a51521.js.map\n","import { Color, MeshStandardMaterial } from 'three';\n\nexport class FogVolumeMaterial extends MeshStandardMaterial {\n\n\tconstructor( params ) {\n\n\t\tsuper( params );\n\n\t\tthis.isFogVolumeMaterial = true;\n\n\t\tthis.density = 0.015;\n\t\tthis.emissive = new Color();\n\t\tthis.emissiveIntensity = 0.0;\n\t\tthis.opacity = 0.15;\n\t\tthis.transparent = true;\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.setValues( params );\n\n\t}\n\n}\n","import { SpotLight } from 'three';\n\nexport class PhysicalSpotLight extends SpotLight {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.iesMap = null;\n\t\tthis.radius = 0;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.iesMap = source.iesMap;\n\t\tthis.radius = source.radius;\n\n\t\treturn this;\n\n\t}\n\n}\n","export function getScaledSettings() {\n\n\tlet tiles = 3;\n\tlet renderScale = Math.max( 1 / window.devicePixelRatio, 0.5 );\n\n\t// adjust performance parameters for mobile\n\tconst aspectRatio = window.innerWidth / window.innerHeight;\n\tif ( aspectRatio < 0.65 ) {\n\n\t\ttiles = 4;\n\t\trenderScale = 0.5 / window.devicePixelRatio;\n\n\t}\n\n\treturn { tiles, renderScale };\n\n}\n","let _styleElement;\nfunction initializeStyles() {\n\n\tif ( _styleElement ) {\n\n\t\treturn;\n\n\t}\n\n\t_styleElement = document.createElement( 'style' );\n\t_styleElement.textContent = /* css */`\n\n\t\t.loader-container, .description {\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\tcolor: white;\n\t\t\tfont-weight: light;\n\t\t\talign-items: flex-start;\n\t\t\tfont-size: 14px;\n\t\t\tpointer-events: none;\n\t\t\tuser-select: none;\n\t\t}\n\n\t\t.loader-container {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tbottom: 0;\n\t\t}\n\n\t\t.description {\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\ttext-align: center;\n\t\t\tpadding: 5px 0;\n\t\t}\n\n\t\t.loader-container .bar {\n\t\t\theight: 2px;\n\t\t\tbackground: white;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.loader-container .credits,\n\t\t.loader-container .samples,\n\t\t.loader-container .percentage {\n\t\t\tpadding: 5px;\n\t\t\tmargin: 0 0 1px 1px;\n\t\t\tbackground: rgba( 0, 0, 0, 0.2 );\n\t\t\tborder-radius: 2px;\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t.loader-container:not(.loading) .bar,\n\t\t.loader-container:not(.loading) .percentage,\n\t\t.loader-container.loading .credits,\n\t\t.loader-container.loading .samples,\n\t\t.loader-container .credits:empty {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.loader-container .credits a,\n\t\t.loader-container .credits,\n\t\t.loader-container .samples {\n\t\t\tcolor: rgba( 255, 255, 255, 0.75 );\n\t\t}\n\t`;\n\tdocument.head.appendChild( _styleElement );\n\n}\n\nexport class LoaderElement {\n\n\tconstructor() {\n\n\t\tinitializeStyles();\n\n\t\tconst container = document.createElement( 'div' );\n\t\tcontainer.classList.add( 'loader-container' );\n\n\t\tconst percentageEl = document.createElement( 'div' );\n\t\tpercentageEl.classList.add( 'percentage' );\n\t\tcontainer.appendChild( percentageEl );\n\n\t\tconst samplesEl = document.createElement( 'div' );\n\t\tsamplesEl.classList.add( 'samples' );\n\t\tcontainer.appendChild( samplesEl );\n\n\t\tconst creditsEl = document.createElement( 'div' );\n\t\tcreditsEl.classList.add( 'credits' );\n\t\tcontainer.appendChild( creditsEl );\n\n\t\tconst loaderBarEl = document.createElement( 'div' );\n\t\tloaderBarEl.classList.add( 'bar' );\n\t\tcontainer.appendChild( loaderBarEl );\n\n\t\tconst descriptionEl = document.createElement( 'div' );\n\t\tdescriptionEl.classList.add( 'description' );\n\t\tcontainer.appendChild( descriptionEl );\n\n\t\tthis._description = descriptionEl;\n\t\tthis._loaderBar = loaderBarEl;\n\t\tthis._percentage = percentageEl;\n\t\tthis._credits = creditsEl;\n\t\tthis._samples = samplesEl;\n\t\tthis._container = container;\n\n\t\tthis.setPercentage( 0 );\n\n\t}\n\n\tattach( container ) {\n\n\t\tcontainer.appendChild( this._container );\n\t\tcontainer.appendChild( this._description );\n\n\t}\n\n\tsetPercentage( perc ) {\n\n\t\tthis._loaderBar.style.width = `${ perc * 100 }%`;\n\n\t\tif ( perc === 0 ) {\n\n\t\t\tthis._percentage.innerText = 'Loading...';\n\n\t\t} else {\n\n\t\t\tthis._percentage.innerText = `${ ( perc * 100 ).toFixed( 0 ) }%`;\n\n\t\t}\n\n\t\tif ( perc >= 1 ) {\n\n\t\t\tthis._container.classList.remove( 'loading' );\n\n\t\t} else {\n\n\t\t\tthis._container.classList.add( 'loading' );\n\n\t\t}\n\n\t}\n\n\tsetSamples( count, compiling = false ) {\n\n\t\tif ( compiling ) {\n\n\t\t\tthis._samples.innerText = 'compiling shader...';\n\n\t\t} else {\n\n\t\t\tthis._samples.innerText = `${ Math.floor( count ) } samples`;\n\n\t\t}\n\n\t}\n\n\tsetCredits( credits ) {\n\n\t\tthis._credits.innerHTML = credits;\n\n\t}\n\n\tsetDescription( description ) {\n\n\t\tthis._description.innerHTML = description;\n\n\t}\n\n}\n","import { ShaderMaterial } from 'three';\n\nexport class MaterialBase extends ShaderMaterial {\n\n\tset needsUpdate( v ) {\n\n\t\tsuper.needsUpdate = true;\n\t\tthis.dispatchEvent( {\n\n\t\t\ttype: 'recompilation',\n\n\t\t} );\n\n\t}\n\n\tconstructor( shader ) {\n\n\t\tsuper( shader );\n\n\t\tfor ( const key in this.uniforms ) {\n\n\t\t\tObject.defineProperty( this, key, {\n\n\t\t\t\tget() {\n\n\t\t\t\t\treturn this.uniforms[ key ].value;\n\n\t\t\t\t},\n\n\t\t\t\tset( v ) {\n\n\t\t\t\t\tthis.uniforms[ key ].value = v;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// sets the given named define value and sets \"needsUpdate\" to true if it's different\n\tsetDefine( name, value = undefined ) {\n\n\t\tif ( value === undefined || value === null ) {\n\n\t\t\tif ( name in this.defines ) {\n\n\t\t\t\tdelete this.defines[ name ];\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.defines[ name ] !== value ) {\n\n\t\t\t\tthis.defines[ name ] = value;\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n","export const math_functions = /* glsl */`\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n","export const util_functions = /* glsl */`\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n","export const ggx_functions = /* glsl */`\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n","import {\n\tACESFilmicToneMapping,\n\tScene,\n\tBoxGeometry,\n\tCylinderGeometry,\n\tGroup,\n\tMesh,\n\tMeshStandardMaterial,\n\tWebGLRenderer,\n\tColor,\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PhysicalCamera, PhysicalSpotLight, FogVolumeMaterial, WebGLPathTracer } from '../src/index.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { getScaledSettings } from './utils/getScaledSettings.js';\nimport { LoaderElement } from './utils/LoaderElement.js';\n\nlet pathTracer, renderer, controls;\nlet camera, scene, fogMaterial, spotLight;\nlet loader;\n\nconst params = {\n\n\tmultipleImportanceSampling: true,\n\ttiles: 2,\n\trenderScale: 1 / window.devicePixelRatio,\n\n\tcolor: '#eeeeee',\n\tfog: true,\n\tdensity: 0.01,\n\tlightIntensity: 500,\n\tlightColor: '#ffffff',\n\n\tbounces: 10,\n\n\t...getScaledSettings(),\n\n};\n\ninit();\n\nasync function init() {\n\n\tloader = new LoaderElement();\n\tloader.attach( document.body );\n\n\t// renderer\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.toneMapping = ACESFilmicToneMapping;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// path tracer\n\tpathTracer = new WebGLPathTracer( renderer );\n\tpathTracer.tiles.set( params.tiles, params.tiles );\n\n\t// camera\n\tconst aspect = window.innerWidth / window.innerHeight;\n\tcamera = new PhysicalCamera( 75, aspect, 0.025, 500 );\n\tcamera.position.set( 0, 1, 6 );\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tpathTracer.updateCamera();\n\n\t} );\n\n\t// scene\n\tscene = new Scene();\n\tscene.background = new Color( 0 );\n\n\tfogMaterial = new FogVolumeMaterial();\n\n\tconst material = new MeshStandardMaterial( { color: 0x999999, roughness: 1, metalness: 0 } );\n\tconst fogMesh = new Mesh( new BoxGeometry( 8, 4.05, 8 ), fogMaterial );\n\tconst floor = new Mesh( new CylinderGeometry( 5, 5, 0.1, 40 ), material );\n\tfloor.position.y = - 1.1;\n\n\t// prepare light\n\tspotLight = new PhysicalSpotLight();\n\tspotLight.position.set( 0, 1, 0 ).multiplyScalar( 3 );\n\tspotLight.angle = Math.PI / 4.5;\n\tspotLight.decay = 2;\n\tspotLight.penumbra = 0.15;\n\tspotLight.distance = 0.0;\n\tspotLight.intensity = 50.0;\n\tspotLight.radius = 0.05;\n\n\t// prepare slats\n\tconst group = new Group();\n\tgroup.add( spotLight );\n\n\tconst TOTAL_SLATS = 10;\n\tconst WIDTH = 2.0;\n\tconst slat = new Mesh( new BoxGeometry( 0.1, 0.1, 2 ), material );\n\tfor ( let i = 0; i < TOTAL_SLATS; i ++ ) {\n\n\t\tconst s = slat.clone();\n\t\ts.position.x = - WIDTH * 0.5 + WIDTH * i / ( TOTAL_SLATS - 1 );\n\t\ts.position.y = 2;\n\t\tgroup.add( s );\n\n\t}\n\n\tscene.add( fogMesh, floor, group );\n\tpathTracer.setScene( scene, camera );\n\n\tloader.setPercentage( 1 );\n\tonParamsChange();\n\tonResize();\n\n\twindow.addEventListener( 'resize', onResize );\n\n\t// gui\n\tconst gui = new GUI();\n\tconst ptFolder = gui.addFolder( 'Path Tracer' );\n\tptFolder.add( params, 'bounces', 1, 20, 1 ).onChange( onParamsChange );\n\tptFolder.add( params, 'multipleImportanceSampling' ).onChange( onParamsChange );\n\tptFolder.add( params, 'tiles', 1, 4, 1 ).onChange( value => {\n\n\t\tpathTracer.tiles.set( value, value );\n\n\t} );\n\tptFolder.add( params, 'renderScale', 0.1, 1 ).onChange( onParamsChange );\n\n\tconst fogFolder = gui.addFolder( 'Fog' );\n\tfogFolder.addColor( params, 'color' ).onChange( onParamsChange );\n\tfogFolder.add( params, 'density', 0, 1 ).onChange( onParamsChange );\n\n\tconst lightFolder = gui.addFolder( 'Spot Light' );\n\tlightFolder.add( params, 'lightIntensity', 0, 1000 ).onChange( onParamsChange );\n\tlightFolder.addColor( params, 'lightColor' ).onChange( onParamsChange );\n\n\tanimate();\n\n}\n\nfunction onParamsChange() {\n\n\tfogMaterial.color.set( params.color ).convertSRGBToLinear();\n\tfogMaterial.density = params.density;\n\n\tspotLight.intensity = params.lightIntensity;\n\tspotLight.color.set( params.lightColor );\n\n\tpathTracer.multipleImportanceSampling = params.multipleImportanceSampling;\n\tpathTracer.bounces = params.bounces;\n\tpathTracer.renderScale = params.renderScale;\n\n\tpathTracer.updateLights();\n\tpathTracer.updateMaterials();\n\n}\n\nfunction onResize() {\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\tpathTracer.updateCamera();\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\tpathTracer.renderSample();\n\n\tloader.setSamples( pathTracer.samples, pathTracer.isCompiling );\n\n}\n\n\n\n"],"names":["$afdbfb1b28c84b51$var$pathTracer","$afdbfb1b28c84b51$var$renderer","$afdbfb1b28c84b51$var$camera","$afdbfb1b28c84b51$var$scene","$afdbfb1b28c84b51$var$fogMaterial","$afdbfb1b28c84b51$var$spotLight","$afdbfb1b28c84b51$var$loader","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0c05d7af92b89513$export$cb2b7ad109612144","$ilwiq","MeshStandardMaterial","constructor","params","isFogVolumeMaterial","density","emissive","Color","emissiveIntensity","opacity","transparent","roughness","metalness","setValues","$983bac6297e5cd71$export$920191b129a29c0","SpotLight","args","iesMap","radius","copy","source","recursive","$934d596524c3e5a8$export$5bc756cb1c628b75","tiles","renderScale","Math","max","window","devicePixelRatio","innerWidth","innerHeight","$a399336cf50451da$var$_styleElement","$a399336cf50451da$export$c2252eb3bc5ad0b7","document","createElement","textContent","head","appendChild","container","classList","add","percentageEl","samplesEl","creditsEl","loaderBarEl","descriptionEl","_description","_loaderBar","_percentage","_credits","_samples","_container","setPercentage","attach","perc","style","width","innerText","toFixed","remove","setSamples","count","compiling","floor","setCredits","credits","innerHTML","setDescription","description","$6bd4eb2914ee2835$export$f1ac3a587b6cbb5d","ShaderMaterial","needsUpdate","dispatchEvent","type","shader","key","uniforms","value","setDefine","name","defines","$ba14a4aaa0cde19b$export$98323a006d35be35","$a21c9b4177584031$export$fe1d788deccfbee3","$60fb6dc3c6495c33$export$4c711108e2e8ef5e","$5Rd1x","$11ZPe","$kLfIo","$d4kES","$8mHfG","$jiuw3","$cE5k3","$e2Pv4","$afdbfb1b28c84b51$var$params","multipleImportanceSampling","color","fog","lightIntensity","lightColor","bounces","getScaledSettings","$afdbfb1b28c84b51$var$onParamsChange","convertSRGBToLinear","intensity","updateLights","updateMaterials","$afdbfb1b28c84b51$var$onResize","setSize","setPixelRatio","aspect","updateProjectionMatrix","updateCamera","$afdbfb1b28c84b51$var$init","LoaderElement","body","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","domElement","WebGLPathTracer","PhysicalCamera","position","$afdbfb1b28c84b51$var$controls","OrbitControls","addEventListener","Scene","background","FogVolumeMaterial","material","fogMesh","Mesh","BoxGeometry","CylinderGeometry","y","PhysicalSpotLight","multiplyScalar","angle","PI","decay","penumbra","distance","group","Group","slat","i","clone","x","WIDTH","TOTAL_SLATS","setScene","gui","GUI","ptFolder","addFolder","onChange","fogFolder","addColor","lightFolder","$afdbfb1b28c84b51$var$animate","requestAnimationFrame","renderSample","samples","isCompiling"],"version":3,"file":"fog.f4a51521.js.map"}