{"mappings":"IMiBI,EAAY,EAAU,EAAU,EAAa,EAC7C,EAAQ,EAAO,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,e,I,G,I,E,E,QLhBZ,OAAM,UAAqB,EAAA,cAAa,CAE9C,IAAI,YAAa,CAAC,CAAG,CAEpB,KAAK,CAAC,YAAc,CAAA,EACpB,IAAI,CAAC,aAAa,CAAE,CAEnB,KAAM,eAEP,EAED,CAEA,YAAa,CAAM,CAAG,CAIrB,IAAM,IAAM,KAFZ,KAAK,CAAE,GAEY,IAAI,CAAC,QAAQ,CAE/B,OAAO,cAAc,CAAE,IAAI,CAAE,EAAK,CAEjC,MAEC,OAAO,IAAI,CAAC,QAAQ,CAAE,EAAK,CAAC,KAAK,AAElC,EAEA,IAAK,CAAC,EAEL,IAAI,CAAC,QAAQ,CAAE,EAAK,CAAC,KAAK,CAAG,CAE9B,CAED,EAIF,CAGA,UAAW,CAAI,CAAE,CAAiB,CAAG,CAEpC,GAAK,MAAA,EAEJ,CAAA,GAAK,KAAQ,IAAI,CAAC,OAAO,CAIxB,OAFA,OAAO,IAAI,CAAC,OAAO,CAAE,EAAM,CAC3B,IAAI,CAAC,WAAW,CAAG,CAAA,EACZ,CAAA,CAER,MAIA,GAAK,IAAI,CAAC,OAAO,CAAE,EAAM,GAAK,EAI7B,OAFA,IAAI,CAAC,OAAO,CAAE,EAAM,CAAG,EACvB,IAAI,CAAC,WAAW,CAAG,CAAA,EACZ,CAAA,EAMT,MAAO,CAAA,CAER,CAED,C,G,E,Q,S,C,C,C,MCtEI,E,E,E,O,C,gB,I,EAuEG,OAAM,EAEZ,aAAc,CAtET,IAOL,AADA,CAAA,EAAgB,SAAS,aAAa,CAAE,QAAxC,EACc,WAAW,CAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sources":["<anon>","src/materials/MaterialBase.js","example/utils/LoaderElement.js","src/shader/common/math_functions.glsl.js","src/shader/common/util_functions.glsl.js","src/shader/bsdf/ggx_functions.glsl.js","example/materialBall.js","src/materials/fullscreen/DenoiseMaterial.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b70\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b70\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"9fZ6X\", function(module, exports) {\n\n$parcel$export(module.exports, \"MaterialBase\", () => $6bd4eb2914ee2835$export$f1ac3a587b6cbb5d);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $6bd4eb2914ee2835$export$f1ac3a587b6cbb5d extends (0, $ilwiq.ShaderMaterial) {\n    set needsUpdate(v) {\n        super.needsUpdate = true;\n        this.dispatchEvent({\n            type: \"recompilation\"\n        });\n    }\n    constructor(shader){\n        super(shader);\n        for(const key in this.uniforms)Object.defineProperty(this, key, {\n            get () {\n                return this.uniforms[key].value;\n            },\n            set (v) {\n                this.uniforms[key].value = v;\n            }\n        });\n    }\n    // sets the given named define value and sets \"needsUpdate\" to true if it's different\n    setDefine(name, value) {\n        if (value === undefined || value === null) {\n            if (name in this.defines) {\n                delete this.defines[name];\n                this.needsUpdate = true;\n                return true;\n            }\n        } else if (this.defines[name] !== value) {\n            this.defines[name] = value;\n            this.needsUpdate = true;\n            return true;\n        }\n        return false;\n    }\n}\n\n});\n\nparcelRegister(\"e2Pv4\", function(module, exports) {\n\n$parcel$export(module.exports, \"LoaderElement\", () => $a399336cf50451da$export$c2252eb3bc5ad0b7);\nlet $a399336cf50451da$var$_styleElement;\nfunction $a399336cf50451da$var$initializeStyles() {\n    if ($a399336cf50451da$var$_styleElement) return;\n    $a399336cf50451da$var$_styleElement = document.createElement(\"style\");\n    $a399336cf50451da$var$_styleElement.textContent = /* css */ `\n\n\t\t.loader-container, .description {\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\tcolor: white;\n\t\t\tfont-weight: light;\n\t\t\talign-items: flex-start;\n\t\t\tfont-size: 14px;\n\t\t\tpointer-events: none;\n\t\t\tuser-select: none;\n\t\t}\n\n\t\t.loader-container {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tbottom: 0;\n\t\t}\n\n\t\t.description {\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\ttext-align: center;\n\t\t\tpadding: 5px 0;\n\t\t}\n\n\t\t.loader-container .bar {\n\t\t\theight: 2px;\n\t\t\tbackground: white;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.loader-container .credits,\n\t\t.loader-container .samples,\n\t\t.loader-container .percentage {\n\t\t\tpadding: 5px;\n\t\t\tmargin: 0 0 1px 1px;\n\t\t\tbackground: rgba( 0, 0, 0, 0.2 );\n\t\t\tborder-radius: 2px;\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t.loader-container:not(.loading) .bar,\n\t\t.loader-container:not(.loading) .percentage,\n\t\t.loader-container.loading .credits,\n\t\t.loader-container.loading .samples,\n\t\t.loader-container .credits:empty {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.loader-container .credits a,\n\t\t.loader-container .credits,\n\t\t.loader-container .samples {\n\t\t\tcolor: rgba( 255, 255, 255, 0.75 );\n\t\t}\n\t`;\n    document.head.appendChild($a399336cf50451da$var$_styleElement);\n}\nclass $a399336cf50451da$export$c2252eb3bc5ad0b7 {\n    constructor(){\n        $a399336cf50451da$var$initializeStyles();\n        const container = document.createElement(\"div\");\n        container.classList.add(\"loader-container\");\n        const percentageEl = document.createElement(\"div\");\n        percentageEl.classList.add(\"percentage\");\n        container.appendChild(percentageEl);\n        const samplesEl = document.createElement(\"div\");\n        samplesEl.classList.add(\"samples\");\n        container.appendChild(samplesEl);\n        const creditsEl = document.createElement(\"div\");\n        creditsEl.classList.add(\"credits\");\n        container.appendChild(creditsEl);\n        const loaderBarEl = document.createElement(\"div\");\n        loaderBarEl.classList.add(\"bar\");\n        container.appendChild(loaderBarEl);\n        const descriptionEl = document.createElement(\"div\");\n        descriptionEl.classList.add(\"description\");\n        container.appendChild(descriptionEl);\n        this._description = descriptionEl;\n        this._loaderBar = loaderBarEl;\n        this._percentage = percentageEl;\n        this._credits = creditsEl;\n        this._samples = samplesEl;\n        this._container = container;\n        this.setPercentage(0);\n    }\n    attach(container) {\n        container.appendChild(this._container);\n        container.appendChild(this._description);\n    }\n    setPercentage(perc) {\n        this._loaderBar.style.width = `${perc * 100}%`;\n        if (perc === 0) this._percentage.innerText = \"Loading...\";\n        else this._percentage.innerText = `${(perc * 100).toFixed(0)}%`;\n        if (perc >= 1) this._container.classList.remove(\"loading\");\n        else this._container.classList.add(\"loading\");\n    }\n    setSamples(count, compiling = false) {\n        if (compiling) this._samples.innerText = \"compiling shader...\";\n        else this._samples.innerText = `${Math.floor(count)} samples`;\n    }\n    setCredits(credits) {\n        this._credits.innerHTML = credits;\n    }\n    setDescription(description) {\n        this._description.innerHTML = description;\n    }\n}\n\n});\n\nparcelRegister(\"fYvb1\", function(module, exports) {\n\n$parcel$export(module.exports, \"math_functions\", () => $ba14a4aaa0cde19b$export$98323a006d35be35);\nconst $ba14a4aaa0cde19b$export$98323a006d35be35 = /* glsl */ `\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n\n});\n\nparcelRegister(\"dUUQZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"util_functions\", () => $a21c9b4177584031$export$fe1d788deccfbee3);\nconst $a21c9b4177584031$export$fe1d788deccfbee3 = /* glsl */ `\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n\n});\n\nparcelRegister(\"8keuf\", function(module, exports) {\n\n$parcel$export(module.exports, \"ggx_functions\", () => $60fb6dc3c6495c33$export$4c711108e2e8ef5e);\nconst $60fb6dc3c6495c33$export$4c711108e2e8ef5e = /* glsl */ `\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n\n});\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $RPVlj = parcelRequire(\"RPVlj\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $9fZ6X = parcelRequire(\"9fZ6X\");\nclass $681d3146eaaf1aa4$export$e6c92f54dc85f279 extends (0, $9fZ6X.MaterialBase) {\n    constructor(parameters){\n        super({\n            blending: (0, $ilwiq.NoBlending),\n            transparent: false,\n            depthWrite: false,\n            depthTest: false,\n            defines: {\n                USE_SLIDER: 0\n            },\n            uniforms: {\n                sigma: {\n                    value: 5.0\n                },\n                threshold: {\n                    value: 0.03\n                },\n                kSigma: {\n                    value: 1.0\n                },\n                map: {\n                    value: null\n                },\n                opacity: {\n                    value: 1\n                }\n            },\n            vertexShader: /* glsl */ `\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t`,\n            fragmentShader: /* glsl */ `\n\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t//  Copyright (c) 2018-2019 Michele Morrone\n\t\t\t\t//  All rights reserved.\n\t\t\t\t//\n\t\t\t\t//  https://michelemorrone.eu - https://BrutPitt.com\n\t\t\t\t//\n\t\t\t\t//  me@michelemorrone.eu - brutpitt@gmail.com\n\t\t\t\t//  twitter: @BrutPitt - github: BrutPitt\n\t\t\t\t//\n\t\t\t\t//  https://github.com/BrutPitt/glslSmartDeNoise/\n\t\t\t\t//\n\t\t\t\t//  This software is distributed under the terms of the BSD 2-Clause license\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tuniform float sigma;\n\t\t\t\tuniform float threshold;\n\t\t\t\tuniform float kSigma;\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439\n\t\t\t\t#define INV_PI 0.31830988618379067153776752674503\n\n\t\t\t\t// Parameters:\n\t\t\t\t//\t sampler2D tex\t - sampler image / texture\n\t\t\t\t//\t vec2 uv\t\t   - actual fragment coord\n\t\t\t\t//\t float sigma  >  0 - sigma Standard Deviation\n\t\t\t\t//\t float kSigma >= 0 - sigma coefficient\n\t\t\t\t//\t\t kSigma * sigma  -->  radius of the circular kernel\n\t\t\t\t//\t float threshold   - edge sharpening threshold\n\t\t\t\tvec4 smartDeNoise( sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold ) {\n\n\t\t\t\t\tfloat radius = round( kSigma * sigma );\n\t\t\t\t\tfloat radQ = radius * radius;\n\n\t\t\t\t\tfloat invSigmaQx2 = 0.5 / ( sigma * sigma );\n\t\t\t\t\tfloat invSigmaQx2PI = INV_PI * invSigmaQx2;\n\n\t\t\t\t\tfloat invThresholdSqx2 = 0.5 / ( threshold * threshold );\n\t\t\t\t\tfloat invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;\n\n\t\t\t\t\tvec4 centrPx = texture2D( tex, uv );\n\t\t\t\t\tcentrPx.rgb *= centrPx.a;\n\n\t\t\t\t\tfloat zBuff = 0.0;\n\t\t\t\t\tvec4 aBuff = vec4( 0.0 );\n\t\t\t\t\tvec2 size = vec2( textureSize( tex, 0 ) );\n\n\t\t\t\t\tvec2 d;\n\t\t\t\t\tfor ( d.x = - radius; d.x <= radius; d.x ++ ) {\n\n\t\t\t\t\t\tfloat pt = sqrt( radQ - d.x * d.x );\n\n\t\t\t\t\t\tfor ( d.y = - pt; d.y <= pt; d.y ++ ) {\n\n\t\t\t\t\t\t\tfloat blurFactor = exp( - dot( d, d ) * invSigmaQx2 ) * invSigmaQx2PI;\n\n\t\t\t\t\t\t\tvec4 walkPx = texture2D( tex, uv + d / size );\n\t\t\t\t\t\t\twalkPx.rgb *= walkPx.a;\n\n\t\t\t\t\t\t\tvec4 dC = walkPx - centrPx;\n\t\t\t\t\t\t\tfloat deltaFactor = exp( - dot( dC.rgba, dC.rgba ) * invThresholdSqx2 ) * invThresholdSqrt2PI * blurFactor;\n\n\t\t\t\t\t\t\tzBuff += deltaFactor;\n\t\t\t\t\t\t\taBuff += deltaFactor * walkPx;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn aBuff / zBuff;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = smartDeNoise( map, vec2( vUv.x, vUv.y ), sigma, kSigma, threshold );\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <colorspace_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\n\t\t\t\t}\n\n\t\t\t`\n        });\n        this.setValues(parameters);\n    }\n}\n\n\nvar $8mHfG = parcelRequire(\"8mHfG\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $e2Pv4 = parcelRequire(\"e2Pv4\");\n\nvar $jiJLv = parcelRequire(\"jiJLv\");\n\nvar $lhJUT = parcelRequire(\"lhJUT\");\nconst $0473c5c83fd2a77a$var$CREDITS = \"Material orb model courtesy of USD Working Group\";\nlet $0473c5c83fd2a77a$var$pathTracer, $0473c5c83fd2a77a$var$renderer, $0473c5c83fd2a77a$var$controls, $0473c5c83fd2a77a$var$denoiseQuad, $0473c5c83fd2a77a$var$material;\nlet $0473c5c83fd2a77a$var$camera, $0473c5c83fd2a77a$var$scene, $0473c5c83fd2a77a$var$loader;\nconst $0473c5c83fd2a77a$var$params = {\n    materialProperties: {\n        color: \"#ffe6bd\",\n        emissive: \"#000000\",\n        emissiveIntensity: 1,\n        roughness: 0,\n        metalness: 1,\n        ior: 1.495,\n        transmission: 0.0,\n        thinFilm: false,\n        attenuationColor: \"#ffffff\",\n        attenuationDistance: 0.5,\n        opacity: 1.0,\n        clearcoat: 0.0,\n        clearcoatRoughness: 0.0,\n        sheenColor: \"#000000\",\n        sheenRoughness: 0.0,\n        iridescence: 0.0,\n        iridescenceIOR: 1.5,\n        iridescenceThickness: 400,\n        specularColor: \"#ffffff\",\n        specularIntensity: 1.0,\n        matte: false,\n        flatShading: false,\n        castShadow: true\n    },\n    multipleImportanceSampling: true,\n    denoiseEnabled: true,\n    denoiseSigma: 2.5,\n    denoiseThreshold: 0.1,\n    denoiseKSigma: 1.0,\n    bounces: 5,\n    renderScale: 1 / window.devicePixelRatio,\n    transmissiveBounces: 20,\n    filterGlossyFactor: 0.5,\n    tiles: 3\n};\nif (window.location.hash.includes(\"transmission\")) {\n    $0473c5c83fd2a77a$var$params.materialProperties.metalness = 0.0;\n    $0473c5c83fd2a77a$var$params.materialProperties.roughness = 0.23;\n    $0473c5c83fd2a77a$var$params.materialProperties.transmission = 1.0;\n    $0473c5c83fd2a77a$var$params.materialProperties.color = \"#ffffff\";\n    $0473c5c83fd2a77a$var$params.bounces = 10;\n    $0473c5c83fd2a77a$var$params.tiles = 2;\n} else if (window.location.hash.includes(\"iridescent\")) {\n    $0473c5c83fd2a77a$var$params.materialProperties.color = \"#474747\";\n    $0473c5c83fd2a77a$var$params.materialProperties.roughness = 0.25;\n    $0473c5c83fd2a77a$var$params.materialProperties.metalness = 1.0;\n    $0473c5c83fd2a77a$var$params.materialProperties.iridescence = 1.0;\n    $0473c5c83fd2a77a$var$params.materialProperties.iridescenceIOR = 2.2;\n} else if (window.location.hash.includes(\"acrylic\")) {\n    $0473c5c83fd2a77a$var$params.materialProperties.color = \"#ffffff\";\n    $0473c5c83fd2a77a$var$params.materialProperties.roughness = 0;\n    $0473c5c83fd2a77a$var$params.materialProperties.metalness = 0;\n    $0473c5c83fd2a77a$var$params.materialProperties.transmission = 1.0;\n    $0473c5c83fd2a77a$var$params.materialProperties.attenuationDistance = 0.75;\n    $0473c5c83fd2a77a$var$params.materialProperties.attenuationColor = \"#2a6dc6\";\n    $0473c5c83fd2a77a$var$params.bounces = 20;\n    $0473c5c83fd2a77a$var$params.tiles = 3;\n}\n// adjust performance parameters for mobile\nconst $0473c5c83fd2a77a$var$aspectRatio = window.innerWidth / window.innerHeight;\nif ($0473c5c83fd2a77a$var$aspectRatio < 0.65) {\n    $0473c5c83fd2a77a$var$params.bounces = Math.max($0473c5c83fd2a77a$var$params.bounces, 6);\n    $0473c5c83fd2a77a$var$params.renderScale *= 0.5;\n    $0473c5c83fd2a77a$var$params.tiles = 2;\n    $0473c5c83fd2a77a$var$params.multipleImportanceSampling = false;\n}\n$0473c5c83fd2a77a$var$init();\nasync function $0473c5c83fd2a77a$var$init() {\n    (0, $lhJUT.RectAreaLightUniformsLib).init();\n    $0473c5c83fd2a77a$var$loader = new (0, $e2Pv4.LoaderElement)();\n    $0473c5c83fd2a77a$var$loader.attach(document.body);\n    // renderer\n    $0473c5c83fd2a77a$var$renderer = new (0, $ilwiq.WebGLRenderer)({\n        antialias: true\n    });\n    $0473c5c83fd2a77a$var$renderer.toneMapping = (0, $ilwiq.ACESFilmicToneMapping);\n    $0473c5c83fd2a77a$var$renderer.toneMappingExposure = 0.02;\n    document.body.appendChild($0473c5c83fd2a77a$var$renderer.domElement);\n    // path tracer\n    $0473c5c83fd2a77a$var$pathTracer = new (0, $8mHfG.WebGLPathTracer)($0473c5c83fd2a77a$var$renderer);\n    $0473c5c83fd2a77a$var$pathTracer.tiles.set($0473c5c83fd2a77a$var$params.tiles, $0473c5c83fd2a77a$var$params.tiles);\n    $0473c5c83fd2a77a$var$pathTracer.textureSize.set(2048, 2048);\n    $0473c5c83fd2a77a$var$pathTracer.renderToCanvasCallback = (target, renderer, quad)=>{\n        $0473c5c83fd2a77a$var$denoiseQuad.material.sigma = $0473c5c83fd2a77a$var$params.denoiseSigma;\n        $0473c5c83fd2a77a$var$denoiseQuad.material.threshold = $0473c5c83fd2a77a$var$params.denoiseThreshold;\n        $0473c5c83fd2a77a$var$denoiseQuad.material.kSigma = $0473c5c83fd2a77a$var$params.denoiseKSigma;\n        $0473c5c83fd2a77a$var$denoiseQuad.material.opacity = quad.material.opacity;\n        const autoClear = renderer.autoClear;\n        const finalQuad = $0473c5c83fd2a77a$var$params.denoiseEnabled ? $0473c5c83fd2a77a$var$denoiseQuad : quad;\n        renderer.autoClear = false;\n        finalQuad.material.map = target.texture;\n        finalQuad.render(renderer);\n        renderer.autoClear = autoClear;\n    };\n    // denoiser\n    $0473c5c83fd2a77a$var$denoiseQuad = new (0, $RPVlj.FullScreenQuad)(new (0, $681d3146eaaf1aa4$export$e6c92f54dc85f279)({\n        map: null,\n        blending: (0, $ilwiq.CustomBlending),\n        premultipliedAlpha: $0473c5c83fd2a77a$var$renderer.getContextAttributes().premultipliedAlpha\n    }));\n    $0473c5c83fd2a77a$var$scene = new (0, $ilwiq.Scene)();\n    window.SCENE = $0473c5c83fd2a77a$var$scene;\n    // load assets\n    const orb = await new (0, $jiJLv.MaterialOrbSceneLoader)().loadAsync();\n    // scene initialization\n    $0473c5c83fd2a77a$var$scene.add(orb.scene);\n    $0473c5c83fd2a77a$var$camera = orb.camera;\n    $0473c5c83fd2a77a$var$material = orb.material;\n    // move camera to the scene\n    $0473c5c83fd2a77a$var$scene.attach($0473c5c83fd2a77a$var$camera);\n    $0473c5c83fd2a77a$var$camera.removeFromParent();\n    // controls\n    $0473c5c83fd2a77a$var$controls = new (0, $5Rd1x.OrbitControls)($0473c5c83fd2a77a$var$camera, $0473c5c83fd2a77a$var$renderer.domElement);\n    $0473c5c83fd2a77a$var$controls.addEventListener(\"change\", ()=>$0473c5c83fd2a77a$var$pathTracer.updateCamera());\n    // shift target\n    const fwd = new (0, $ilwiq.Vector3)(0, 0, -1).transformDirection($0473c5c83fd2a77a$var$camera.matrixWorld).normalize();\n    $0473c5c83fd2a77a$var$controls.target.copy($0473c5c83fd2a77a$var$camera.position).addScaledVector(fwd, 25);\n    $0473c5c83fd2a77a$var$controls.update();\n    $0473c5c83fd2a77a$var$loader.setPercentage(1);\n    $0473c5c83fd2a77a$var$loader.setCredits($0473c5c83fd2a77a$var$CREDITS);\n    $0473c5c83fd2a77a$var$onParamsChange();\n    $0473c5c83fd2a77a$var$onResize();\n    window.addEventListener(\"resize\", $0473c5c83fd2a77a$var$onResize);\n    // gui\n    const gui = new (0, $jiuw3.GUI)();\n    const ptFolder = gui.addFolder(\"Path Tracer\");\n    ptFolder.add($0473c5c83fd2a77a$var$params, \"multipleImportanceSampling\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    ptFolder.add($0473c5c83fd2a77a$var$params, \"tiles\", 1, 4, 1).onChange((value)=>{\n        $0473c5c83fd2a77a$var$pathTracer.tiles.set(value, value);\n    });\n    ptFolder.add($0473c5c83fd2a77a$var$params, \"filterGlossyFactor\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    ptFolder.add($0473c5c83fd2a77a$var$params, \"bounces\", 1, 30, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    ptFolder.add($0473c5c83fd2a77a$var$params, \"transmissiveBounces\", 0, 40, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    ptFolder.add($0473c5c83fd2a77a$var$params, \"renderScale\", 0.1, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    const denoiseFolder = gui.addFolder(\"Denoising\");\n    denoiseFolder.add($0473c5c83fd2a77a$var$params, \"denoiseEnabled\");\n    denoiseFolder.add($0473c5c83fd2a77a$var$params, \"denoiseSigma\", 0.01, 12.0);\n    denoiseFolder.add($0473c5c83fd2a77a$var$params, \"denoiseThreshold\", 0.01, 1.0);\n    denoiseFolder.add($0473c5c83fd2a77a$var$params, \"denoiseKSigma\", 0.0, 12.0);\n    denoiseFolder.close();\n    const matFolder1 = gui.addFolder(\"Material\");\n    matFolder1.addColor($0473c5c83fd2a77a$var$params.materialProperties, \"color\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.addColor($0473c5c83fd2a77a$var$params.materialProperties, \"emissive\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"emissiveIntensity\", 0.0, 50.0, 0.01).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"roughness\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"metalness\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"opacity\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"transmission\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"thinFilm\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"attenuationDistance\", 0.05, 2.0).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.addColor($0473c5c83fd2a77a$var$params.materialProperties, \"attenuationColor\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"ior\", 0.9, 3.0).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"clearcoat\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"clearcoatRoughness\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.addColor($0473c5c83fd2a77a$var$params.materialProperties, \"sheenColor\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"sheenRoughness\", 0, 1).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"iridescence\", 0.0, 1.0).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"iridescenceIOR\", 0.1, 3.0).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"iridescenceThickness\", 0.0, 1200.0).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.addColor($0473c5c83fd2a77a$var$params.materialProperties, \"specularColor\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"specularIntensity\", 0.0, 1.0).onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"matte\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"flatShading\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.add($0473c5c83fd2a77a$var$params.materialProperties, \"castShadow\").onChange($0473c5c83fd2a77a$var$onParamsChange);\n    matFolder1.close();\n    $0473c5c83fd2a77a$var$animate();\n}\nfunction $0473c5c83fd2a77a$var$onResize() {\n    $0473c5c83fd2a77a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $0473c5c83fd2a77a$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $0473c5c83fd2a77a$var$camera.aspect = window.innerWidth / window.innerHeight;\n    $0473c5c83fd2a77a$var$camera.updateProjectionMatrix();\n    $0473c5c83fd2a77a$var$pathTracer.updateCamera();\n}\nfunction $0473c5c83fd2a77a$var$onParamsChange() {\n    const materialProperties = $0473c5c83fd2a77a$var$params.materialProperties;\n    $0473c5c83fd2a77a$var$material.color.set(materialProperties.color);\n    $0473c5c83fd2a77a$var$material.emissive.set(materialProperties.emissive);\n    $0473c5c83fd2a77a$var$material.emissiveIntensity = materialProperties.emissiveIntensity;\n    $0473c5c83fd2a77a$var$material.metalness = materialProperties.metalness;\n    $0473c5c83fd2a77a$var$material.roughness = materialProperties.roughness;\n    $0473c5c83fd2a77a$var$material.transmission = materialProperties.transmission;\n    $0473c5c83fd2a77a$var$material.attenuationDistance = materialProperties.thinFilm ? Infinity : materialProperties.attenuationDistance;\n    $0473c5c83fd2a77a$var$material.attenuationColor.set(materialProperties.attenuationColor);\n    $0473c5c83fd2a77a$var$material.ior = materialProperties.ior;\n    $0473c5c83fd2a77a$var$material.opacity = materialProperties.opacity;\n    $0473c5c83fd2a77a$var$material.clearcoat = materialProperties.clearcoat;\n    $0473c5c83fd2a77a$var$material.clearcoatRoughness = materialProperties.clearcoatRoughness;\n    $0473c5c83fd2a77a$var$material.sheenColor.set(materialProperties.sheenColor);\n    $0473c5c83fd2a77a$var$material.sheenRoughness = materialProperties.sheenRoughness;\n    $0473c5c83fd2a77a$var$material.iridescence = materialProperties.iridescence;\n    $0473c5c83fd2a77a$var$material.iridescenceIOR = materialProperties.iridescenceIOR;\n    $0473c5c83fd2a77a$var$material.iridescenceThicknessRange = [\n        0,\n        materialProperties.iridescenceThickness\n    ];\n    $0473c5c83fd2a77a$var$material.specularColor.set(materialProperties.specularColor);\n    $0473c5c83fd2a77a$var$material.specularIntensity = materialProperties.specularIntensity;\n    $0473c5c83fd2a77a$var$material.transparent = $0473c5c83fd2a77a$var$material.opacity < 1;\n    $0473c5c83fd2a77a$var$material.flatShading = materialProperties.flatShading;\n    $0473c5c83fd2a77a$var$pathTracer.transmissiveBounces = $0473c5c83fd2a77a$var$params.transmissiveBounces;\n    $0473c5c83fd2a77a$var$pathTracer.multipleImportanceSampling = $0473c5c83fd2a77a$var$params.multipleImportanceSampling;\n    $0473c5c83fd2a77a$var$pathTracer.filterGlossyFactor = $0473c5c83fd2a77a$var$params.filterGlossyFactor;\n    $0473c5c83fd2a77a$var$pathTracer.bounces = $0473c5c83fd2a77a$var$params.bounces;\n    $0473c5c83fd2a77a$var$pathTracer.renderScale = $0473c5c83fd2a77a$var$params.renderScale;\n    // note: custom properties\n    $0473c5c83fd2a77a$var$material.matte = materialProperties.matte;\n    $0473c5c83fd2a77a$var$material.castShadow = materialProperties.castShadow;\n    $0473c5c83fd2a77a$var$pathTracer.updateMaterials();\n    $0473c5c83fd2a77a$var$pathTracer.setScene($0473c5c83fd2a77a$var$scene, $0473c5c83fd2a77a$var$camera);\n}\nfunction $0473c5c83fd2a77a$var$animate() {\n    requestAnimationFrame($0473c5c83fd2a77a$var$animate);\n    $0473c5c83fd2a77a$var$pathTracer.renderSample();\n    $0473c5c83fd2a77a$var$loader.setSamples($0473c5c83fd2a77a$var$pathTracer.samples, $0473c5c83fd2a77a$var$pathTracer.isCompiling);\n}\n\n\n//# sourceMappingURL=materialBall.2d30a0c5.js.map\n","import { ShaderMaterial } from 'three';\n\nexport class MaterialBase extends ShaderMaterial {\n\n\tset needsUpdate( v ) {\n\n\t\tsuper.needsUpdate = true;\n\t\tthis.dispatchEvent( {\n\n\t\t\ttype: 'recompilation',\n\n\t\t} );\n\n\t}\n\n\tconstructor( shader ) {\n\n\t\tsuper( shader );\n\n\t\tfor ( const key in this.uniforms ) {\n\n\t\t\tObject.defineProperty( this, key, {\n\n\t\t\t\tget() {\n\n\t\t\t\t\treturn this.uniforms[ key ].value;\n\n\t\t\t\t},\n\n\t\t\t\tset( v ) {\n\n\t\t\t\t\tthis.uniforms[ key ].value = v;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// sets the given named define value and sets \"needsUpdate\" to true if it's different\n\tsetDefine( name, value = undefined ) {\n\n\t\tif ( value === undefined || value === null ) {\n\n\t\t\tif ( name in this.defines ) {\n\n\t\t\t\tdelete this.defines[ name ];\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.defines[ name ] !== value ) {\n\n\t\t\t\tthis.defines[ name ] = value;\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n","let _styleElement;\nfunction initializeStyles() {\n\n\tif ( _styleElement ) {\n\n\t\treturn;\n\n\t}\n\n\t_styleElement = document.createElement( 'style' );\n\t_styleElement.textContent = /* css */`\n\n\t\t.loader-container, .description {\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\tcolor: white;\n\t\t\tfont-weight: light;\n\t\t\talign-items: flex-start;\n\t\t\tfont-size: 14px;\n\t\t\tpointer-events: none;\n\t\t\tuser-select: none;\n\t\t}\n\n\t\t.loader-container {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tbottom: 0;\n\t\t}\n\n\t\t.description {\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\ttext-align: center;\n\t\t\tpadding: 5px 0;\n\t\t}\n\n\t\t.loader-container .bar {\n\t\t\theight: 2px;\n\t\t\tbackground: white;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.loader-container .credits,\n\t\t.loader-container .samples,\n\t\t.loader-container .percentage {\n\t\t\tpadding: 5px;\n\t\t\tmargin: 0 0 1px 1px;\n\t\t\tbackground: rgba( 0, 0, 0, 0.2 );\n\t\t\tborder-radius: 2px;\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t.loader-container:not(.loading) .bar,\n\t\t.loader-container:not(.loading) .percentage,\n\t\t.loader-container.loading .credits,\n\t\t.loader-container.loading .samples,\n\t\t.loader-container .credits:empty {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.loader-container .credits a,\n\t\t.loader-container .credits,\n\t\t.loader-container .samples {\n\t\t\tcolor: rgba( 255, 255, 255, 0.75 );\n\t\t}\n\t`;\n\tdocument.head.appendChild( _styleElement );\n\n}\n\nexport class LoaderElement {\n\n\tconstructor() {\n\n\t\tinitializeStyles();\n\n\t\tconst container = document.createElement( 'div' );\n\t\tcontainer.classList.add( 'loader-container' );\n\n\t\tconst percentageEl = document.createElement( 'div' );\n\t\tpercentageEl.classList.add( 'percentage' );\n\t\tcontainer.appendChild( percentageEl );\n\n\t\tconst samplesEl = document.createElement( 'div' );\n\t\tsamplesEl.classList.add( 'samples' );\n\t\tcontainer.appendChild( samplesEl );\n\n\t\tconst creditsEl = document.createElement( 'div' );\n\t\tcreditsEl.classList.add( 'credits' );\n\t\tcontainer.appendChild( creditsEl );\n\n\t\tconst loaderBarEl = document.createElement( 'div' );\n\t\tloaderBarEl.classList.add( 'bar' );\n\t\tcontainer.appendChild( loaderBarEl );\n\n\t\tconst descriptionEl = document.createElement( 'div' );\n\t\tdescriptionEl.classList.add( 'description' );\n\t\tcontainer.appendChild( descriptionEl );\n\n\t\tthis._description = descriptionEl;\n\t\tthis._loaderBar = loaderBarEl;\n\t\tthis._percentage = percentageEl;\n\t\tthis._credits = creditsEl;\n\t\tthis._samples = samplesEl;\n\t\tthis._container = container;\n\n\t\tthis.setPercentage( 0 );\n\n\t}\n\n\tattach( container ) {\n\n\t\tcontainer.appendChild( this._container );\n\t\tcontainer.appendChild( this._description );\n\n\t}\n\n\tsetPercentage( perc ) {\n\n\t\tthis._loaderBar.style.width = `${ perc * 100 }%`;\n\n\t\tif ( perc === 0 ) {\n\n\t\t\tthis._percentage.innerText = 'Loading...';\n\n\t\t} else {\n\n\t\t\tthis._percentage.innerText = `${ ( perc * 100 ).toFixed( 0 ) }%`;\n\n\t\t}\n\n\t\tif ( perc >= 1 ) {\n\n\t\t\tthis._container.classList.remove( 'loading' );\n\n\t\t} else {\n\n\t\t\tthis._container.classList.add( 'loading' );\n\n\t\t}\n\n\t}\n\n\tsetSamples( count, compiling = false ) {\n\n\t\tif ( compiling ) {\n\n\t\t\tthis._samples.innerText = 'compiling shader...';\n\n\t\t} else {\n\n\t\t\tthis._samples.innerText = `${ Math.floor( count ) } samples`;\n\n\t\t}\n\n\t}\n\n\tsetCredits( credits ) {\n\n\t\tthis._credits.innerHTML = credits;\n\n\t}\n\n\tsetDescription( description ) {\n\n\t\tthis._description.innerHTML = description;\n\n\t}\n\n}\n","export const math_functions = /* glsl */`\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n","export const util_functions = /* glsl */`\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n","export const ggx_functions = /* glsl */`\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n","import {\n\tACESFilmicToneMapping,\n\tCustomBlending,\n\tScene,\n\tWebGLRenderer,\n\tVector3,\n} from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { DenoiseMaterial, WebGLPathTracer } from '../src/index.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { LoaderElement } from './utils/LoaderElement.js';\nimport { MaterialOrbSceneLoader } from './utils/MaterialOrbSceneLoader.js';\nimport { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js';\n\nconst CREDITS = 'Material orb model courtesy of USD Working Group';\n\nlet pathTracer, renderer, controls, denoiseQuad, material;\nlet camera, scene, loader;\n\nconst params = {\n\n\tmaterialProperties: {\n\t\tcolor: '#ffe6bd',\n\t\temissive: '#000000',\n\t\temissiveIntensity: 1,\n\t\troughness: 0,\n\t\tmetalness: 1,\n\t\tior: 1.495,\n\t\ttransmission: 0.0,\n\t\tthinFilm: false,\n\t\tattenuationColor: '#ffffff',\n\t\tattenuationDistance: 0.5,\n\t\topacity: 1.0,\n\t\tclearcoat: 0.0,\n\t\tclearcoatRoughness: 0.0,\n\t\tsheenColor: '#000000',\n\t\tsheenRoughness: 0.0,\n\t\tiridescence: 0.0,\n\t\tiridescenceIOR: 1.5,\n\t\tiridescenceThickness: 400,\n\t\tspecularColor: '#ffffff',\n\t\tspecularIntensity: 1.0,\n\t\tmatte: false,\n\t\tflatShading: false,\n\t\tcastShadow: true,\n\t},\n\n\tmultipleImportanceSampling: true,\n\tdenoiseEnabled: true,\n\tdenoiseSigma: 2.5,\n\tdenoiseThreshold: 0.1,\n\tdenoiseKSigma: 1.0,\n\tbounces: 5,\n\trenderScale: 1 / window.devicePixelRatio,\n\ttransmissiveBounces: 20,\n\tfilterGlossyFactor: 0.5,\n\ttiles: 3,\n};\n\nif ( window.location.hash.includes( 'transmission' ) ) {\n\n\tparams.materialProperties.metalness = 0.0;\n\tparams.materialProperties.roughness = 0.23;\n\tparams.materialProperties.transmission = 1.0;\n\tparams.materialProperties.color = '#ffffff';\n\n\tparams.bounces = 10;\n\tparams.tiles = 2;\n\n} else if ( window.location.hash.includes( 'iridescent' ) ) {\n\n\tparams.materialProperties.color = '#474747';\n\tparams.materialProperties.roughness = 0.25;\n\tparams.materialProperties.metalness = 1.0;\n\tparams.materialProperties.iridescence = 1.0;\n\tparams.materialProperties.iridescenceIOR = 2.2;\n\n} else if ( window.location.hash.includes( 'acrylic' ) ) {\n\n\tparams.materialProperties.color = '#ffffff';\n\tparams.materialProperties.roughness = 0;\n\tparams.materialProperties.metalness = 0;\n\tparams.materialProperties.transmission = 1.0;\n\tparams.materialProperties.attenuationDistance = 0.75;\n\tparams.materialProperties.attenuationColor = '#2a6dc6';\n\n\tparams.bounces = 20;\n\tparams.tiles = 3;\n\n}\n\n// adjust performance parameters for mobile\nconst aspectRatio = window.innerWidth / window.innerHeight;\nif ( aspectRatio < 0.65 ) {\n\n\tparams.bounces = Math.max( params.bounces, 6 );\n\tparams.renderScale *= 0.5;\n\tparams.tiles = 2;\n\tparams.multipleImportanceSampling = false;\n\n}\n\ninit();\n\nasync function init() {\n\n\tRectAreaLightUniformsLib.init();\n\n\tloader = new LoaderElement();\n\tloader.attach( document.body );\n\n\t// renderer\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.toneMapping = ACESFilmicToneMapping;\n\trenderer.toneMappingExposure = 0.02;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// path tracer\n\tpathTracer = new WebGLPathTracer( renderer );\n\tpathTracer.tiles.set( params.tiles, params.tiles );\n\tpathTracer.textureSize.set( 2048, 2048 );\n\tpathTracer.renderToCanvasCallback = ( target, renderer, quad ) => {\n\n\t\tdenoiseQuad.material.sigma = params.denoiseSigma;\n\t\tdenoiseQuad.material.threshold = params.denoiseThreshold;\n\t\tdenoiseQuad.material.kSigma = params.denoiseKSigma;\n\t\tdenoiseQuad.material.opacity = quad.material.opacity;\n\n\t\tconst autoClear = renderer.autoClear;\n\t\tconst finalQuad = params.denoiseEnabled ? denoiseQuad : quad;\n\t\trenderer.autoClear = false;\n\t\tfinalQuad.material.map = target.texture;\n\t\tfinalQuad.render( renderer );\n\t\trenderer.autoClear = autoClear;\n\n\t};\n\n\t// denoiser\n\tdenoiseQuad = new FullScreenQuad( new DenoiseMaterial( {\n\t\tmap: null,\n\t\tblending: CustomBlending,\n\t\tpremultipliedAlpha: renderer.getContextAttributes().premultipliedAlpha,\n\t} ) );\n\n\tscene = new Scene();\n\n\twindow.SCENE = scene;\n\n\t// load assets\n\tconst orb = await new MaterialOrbSceneLoader().loadAsync();\n\n\t// scene initialization\n\tscene.add( orb.scene );\n\tcamera = orb.camera;\n\tmaterial = orb.material;\n\n\t// move camera to the scene\n\tscene.attach( camera );\n\tcamera.removeFromParent();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', () => pathTracer.updateCamera() );\n\n\t// shift target\n\tconst fwd = new Vector3( 0, 0, - 1 ).transformDirection( camera.matrixWorld ).normalize();\n\tcontrols.target.copy( camera.position ).addScaledVector( fwd, 25 );\n\tcontrols.update();\n\n\tloader.setPercentage( 1 );\n\tloader.setCredits( CREDITS );\n\n\tonParamsChange();\n\tonResize();\n\twindow.addEventListener( 'resize', onResize );\n\n\t// gui\n\tconst gui = new GUI();\n\tconst ptFolder = gui.addFolder( 'Path Tracer' );\n\tptFolder.add( params, 'multipleImportanceSampling' ).onChange( onParamsChange );\n\tptFolder.add( params, 'tiles', 1, 4, 1 ).onChange( value => {\n\n\t\tpathTracer.tiles.set( value, value );\n\n\t} );\n\tptFolder.add( params, 'filterGlossyFactor', 0, 1 ).onChange( onParamsChange );\n\tptFolder.add( params, 'bounces', 1, 30, 1 ).onChange( onParamsChange );\n\tptFolder.add( params, 'transmissiveBounces', 0, 40, 1 ).onChange( onParamsChange );\n\tptFolder.add( params, 'renderScale', 0.1, 1 ).onChange( onParamsChange );\n\n\tconst denoiseFolder = gui.addFolder( 'Denoising' );\n\tdenoiseFolder.add( params, 'denoiseEnabled' );\n\tdenoiseFolder.add( params, 'denoiseSigma', 0.01, 12.0 );\n\tdenoiseFolder.add( params, 'denoiseThreshold', 0.01, 1.0 );\n\tdenoiseFolder.add( params, 'denoiseKSigma', 0.0, 12.0 );\n\tdenoiseFolder.close();\n\n\tconst matFolder1 = gui.addFolder( 'Material' );\n\tmatFolder1.addColor( params.materialProperties, 'color' ).onChange( onParamsChange );\n\tmatFolder1.addColor( params.materialProperties, 'emissive' ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'emissiveIntensity', 0.0, 50.0, 0.01 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'roughness', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'metalness', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'opacity', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'transmission', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'thinFilm', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'attenuationDistance', 0.05, 2.0 ).onChange( onParamsChange );\n\tmatFolder1.addColor( params.materialProperties, 'attenuationColor' ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'ior', 0.9, 3.0 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'clearcoat', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'clearcoatRoughness', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.addColor( params.materialProperties, 'sheenColor' ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'sheenRoughness', 0, 1 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'iridescence', 0.0, 1.0 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'iridescenceIOR', 0.1, 3.0 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'iridescenceThickness', 0.0, 1200.0 ).onChange( onParamsChange );\n\tmatFolder1.addColor( params.materialProperties, 'specularColor' ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'specularIntensity', 0.0, 1.0 ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'matte' ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'flatShading' ).onChange( onParamsChange );\n\tmatFolder1.add( params.materialProperties, 'castShadow' ).onChange( onParamsChange );\n\tmatFolder1.close();\n\n\tanimate();\n\n}\n\nfunction onResize() {\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\tpathTracer.updateCamera();\n\n}\n\nfunction onParamsChange() {\n\n\tconst materialProperties = params.materialProperties;\n\tmaterial.color.set( materialProperties.color );\n\tmaterial.emissive.set( materialProperties.emissive );\n\tmaterial.emissiveIntensity = materialProperties.emissiveIntensity;\n\tmaterial.metalness = materialProperties.metalness;\n\tmaterial.roughness = materialProperties.roughness;\n\tmaterial.transmission = materialProperties.transmission;\n\tmaterial.attenuationDistance = materialProperties.thinFilm ? Infinity : materialProperties.attenuationDistance;\n\tmaterial.attenuationColor.set( materialProperties.attenuationColor );\n\tmaterial.ior = materialProperties.ior;\n\tmaterial.opacity = materialProperties.opacity;\n\tmaterial.clearcoat = materialProperties.clearcoat;\n\tmaterial.clearcoatRoughness = materialProperties.clearcoatRoughness;\n\tmaterial.sheenColor.set( materialProperties.sheenColor );\n\tmaterial.sheenRoughness = materialProperties.sheenRoughness;\n\tmaterial.iridescence = materialProperties.iridescence;\n\tmaterial.iridescenceIOR = materialProperties.iridescenceIOR;\n\tmaterial.iridescenceThicknessRange = [ 0, materialProperties.iridescenceThickness ];\n\tmaterial.specularColor.set( materialProperties.specularColor );\n\tmaterial.specularIntensity = materialProperties.specularIntensity;\n\tmaterial.transparent = material.opacity < 1;\n\tmaterial.flatShading = materialProperties.flatShading;\n\n\tpathTracer.transmissiveBounces = params.transmissiveBounces;\n\tpathTracer.multipleImportanceSampling = params.multipleImportanceSampling;\n\tpathTracer.filterGlossyFactor = params.filterGlossyFactor;\n\tpathTracer.bounces = params.bounces;\n\tpathTracer.renderScale = params.renderScale;\n\n\t// note: custom properties\n\tmaterial.matte = materialProperties.matte;\n\tmaterial.castShadow = materialProperties.castShadow;\n\n\tpathTracer.updateMaterials();\n\tpathTracer.setScene( scene, camera );\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\tpathTracer.renderSample();\n\tloader.setSamples( pathTracer.samples, pathTracer.isCompiling );\n\n}\n","import { NoBlending } from 'three';\nimport { MaterialBase } from '../MaterialBase.js';\n\nexport class DenoiseMaterial extends MaterialBase {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\ttransparent: false,\n\n\t\t\tdepthWrite: false,\n\n\t\t\tdepthTest: false,\n\n\t\t\tdefines: {\n\n\t\t\t\tUSE_SLIDER: 0,\n\n\t\t\t},\n\n\t\t\tuniforms: {\n\n\t\t\t\tsigma: { value: 5.0 },\n\t\t\t\tthreshold: { value: 0.03 },\n\t\t\t\tkSigma: { value: 1.0 },\n\n\t\t\t\tmap: { value: null },\n\t\t\t\topacity: { value: 1 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t//  Copyright (c) 2018-2019 Michele Morrone\n\t\t\t\t//  All rights reserved.\n\t\t\t\t//\n\t\t\t\t//  https://michelemorrone.eu - https://BrutPitt.com\n\t\t\t\t//\n\t\t\t\t//  me@michelemorrone.eu - brutpitt@gmail.com\n\t\t\t\t//  twitter: @BrutPitt - github: BrutPitt\n\t\t\t\t//\n\t\t\t\t//  https://github.com/BrutPitt/glslSmartDeNoise/\n\t\t\t\t//\n\t\t\t\t//  This software is distributed under the terms of the BSD 2-Clause license\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tuniform float sigma;\n\t\t\t\tuniform float threshold;\n\t\t\t\tuniform float kSigma;\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439\n\t\t\t\t#define INV_PI 0.31830988618379067153776752674503\n\n\t\t\t\t// Parameters:\n\t\t\t\t//\t sampler2D tex\t - sampler image / texture\n\t\t\t\t//\t vec2 uv\t\t   - actual fragment coord\n\t\t\t\t//\t float sigma  >  0 - sigma Standard Deviation\n\t\t\t\t//\t float kSigma >= 0 - sigma coefficient\n\t\t\t\t//\t\t kSigma * sigma  -->  radius of the circular kernel\n\t\t\t\t//\t float threshold   - edge sharpening threshold\n\t\t\t\tvec4 smartDeNoise( sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold ) {\n\n\t\t\t\t\tfloat radius = round( kSigma * sigma );\n\t\t\t\t\tfloat radQ = radius * radius;\n\n\t\t\t\t\tfloat invSigmaQx2 = 0.5 / ( sigma * sigma );\n\t\t\t\t\tfloat invSigmaQx2PI = INV_PI * invSigmaQx2;\n\n\t\t\t\t\tfloat invThresholdSqx2 = 0.5 / ( threshold * threshold );\n\t\t\t\t\tfloat invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;\n\n\t\t\t\t\tvec4 centrPx = texture2D( tex, uv );\n\t\t\t\t\tcentrPx.rgb *= centrPx.a;\n\n\t\t\t\t\tfloat zBuff = 0.0;\n\t\t\t\t\tvec4 aBuff = vec4( 0.0 );\n\t\t\t\t\tvec2 size = vec2( textureSize( tex, 0 ) );\n\n\t\t\t\t\tvec2 d;\n\t\t\t\t\tfor ( d.x = - radius; d.x <= radius; d.x ++ ) {\n\n\t\t\t\t\t\tfloat pt = sqrt( radQ - d.x * d.x );\n\n\t\t\t\t\t\tfor ( d.y = - pt; d.y <= pt; d.y ++ ) {\n\n\t\t\t\t\t\t\tfloat blurFactor = exp( - dot( d, d ) * invSigmaQx2 ) * invSigmaQx2PI;\n\n\t\t\t\t\t\t\tvec4 walkPx = texture2D( tex, uv + d / size );\n\t\t\t\t\t\t\twalkPx.rgb *= walkPx.a;\n\n\t\t\t\t\t\t\tvec4 dC = walkPx - centrPx;\n\t\t\t\t\t\t\tfloat deltaFactor = exp( - dot( dC.rgba, dC.rgba ) * invThresholdSqx2 ) * invThresholdSqrt2PI * blurFactor;\n\n\t\t\t\t\t\t\tzBuff += deltaFactor;\n\t\t\t\t\t\t\taBuff += deltaFactor * walkPx;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn aBuff / zBuff;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = smartDeNoise( map, vec2( vUv.x, vUv.y ), sigma, kSigma, threshold );\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <colorspace_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n"],"names":["$0473c5c83fd2a77a$var$pathTracer","$0473c5c83fd2a77a$var$renderer","$0473c5c83fd2a77a$var$controls","$0473c5c83fd2a77a$var$denoiseQuad","$0473c5c83fd2a77a$var$material","$0473c5c83fd2a77a$var$camera","$0473c5c83fd2a77a$var$scene","$0473c5c83fd2a77a$var$loader","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$6bd4eb2914ee2835$export$f1ac3a587b6cbb5d","$ilwiq","ShaderMaterial","needsUpdate","dispatchEvent","type","constructor","shader","key","uniforms","value","setDefine","name","defines","$a399336cf50451da$var$_styleElement","$a399336cf50451da$export$c2252eb3bc5ad0b7","document","createElement","textContent","head","appendChild","container","classList","add","percentageEl","samplesEl","creditsEl","loaderBarEl","descriptionEl","_description","_loaderBar","_percentage","_credits","_samples","_container","setPercentage","attach","perc","style","width","innerText","toFixed","remove","setSamples","count","compiling","Math","floor","setCredits","credits","innerHTML","setDescription","description","$ba14a4aaa0cde19b$export$98323a006d35be35","$a21c9b4177584031$export$fe1d788deccfbee3","$60fb6dc3c6495c33$export$4c711108e2e8ef5e","$RPVlj","$5Rd1x","$9fZ6X","$681d3146eaaf1aa4$export$e6c92f54dc85f279","MaterialBase","parameters","blending","NoBlending","transparent","depthWrite","depthTest","USE_SLIDER","sigma","threshold","kSigma","map","opacity","vertexShader","fragmentShader","setValues","$8mHfG","$jiuw3","$e2Pv4","$jiJLv","$lhJUT","$0473c5c83fd2a77a$var$params","materialProperties","color","emissive","emissiveIntensity","roughness","metalness","ior","transmission","thinFilm","attenuationColor","attenuationDistance","clearcoat","clearcoatRoughness","sheenColor","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","specularColor","specularIntensity","matte","flatShading","castShadow","multipleImportanceSampling","denoiseEnabled","denoiseSigma","denoiseThreshold","denoiseKSigma","bounces","renderScale","window","devicePixelRatio","transmissiveBounces","filterGlossyFactor","tiles","$0473c5c83fd2a77a$var$init","RectAreaLightUniformsLib","LoaderElement","body","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","toneMappingExposure","domElement","WebGLPathTracer","textureSize","renderToCanvasCallback","target","renderer","quad","material","autoClear","finalQuad","texture","render","FullScreenQuad","CustomBlending","premultipliedAlpha","getContextAttributes","Scene","SCENE","orb","MaterialOrbSceneLoader","loadAsync","scene","camera","removeFromParent","OrbitControls","addEventListener","updateCamera","fwd","Vector3","transformDirection","matrixWorld","normalize","copy","position","addScaledVector","update","$0473c5c83fd2a77a$var$onParamsChange","$0473c5c83fd2a77a$var$onResize","gui","GUI","ptFolder","addFolder","onChange","denoiseFolder","close","matFolder1","addColor","$0473c5c83fd2a77a$var$animate","requestAnimationFrame","renderSample","samples","isCompiling","setSize","innerWidth","innerHeight","setPixelRatio","aspect","updateProjectionMatrix","Infinity","iridescenceThicknessRange","updateMaterials","setScene","location","hash","includes","max"],"version":3,"file":"materialBall.2d30a0c5.js.map"}